/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface EggAbiInterface extends utils.Interface {
  functions: {
    "actived()": FunctionFragment;
    "addRewardAmount(address,uint256)": FunctionFragment;
    "addStake(address[],uint256[])": FunctionFragment;
    "addStakeAmount(address,uint256)": FunctionFragment;
    "addValidNum(address,uint256)": FunctionFragment;
    "allowPrices(uint256)": FunctionFragment;
    "bind(address)": FunctionFragment;
    "checkDownQualified(uint256,uint256)": FunctionFragment;
    "checkReferrerPercent(uint256,uint256)": FunctionFragment;
    "checkRestakePercent(uint256,uint256)": FunctionFragment;
    "checkUpQualified(uint256,uint256)": FunctionFragment;
    "currentIndex()": FunctionFragment;
    "currentRound()": FunctionFragment;
    "ethBalance(address)": FunctionFragment;
    "indexUsers(uint256,uint256)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "oneToken()": FunctionFragment;
    "price()": FunctionFragment;
    "referrers(address)": FunctionFragment;
    "setActive(bool)": FunctionFragment;
    "setOneToken(uint256)": FunctionFragment;
    "setOwner(address,bool)": FunctionFragment;
    "setReferrerInfo(address[],address[])": FunctionFragment;
    "setUpDownLimit(uint256,uint256)": FunctionFragment;
    "stake()": FunctionFragment;
    "updateOperator(address,bool)": FunctionFragment;
    "userIndexs(uint256,address)": FunctionFragment;
    "userRewards(uint256,address)": FunctionFragment;
    "userStakings(uint256,address)": FunctionFragment;
    "validFollowers(address)": FunctionFragment;
    "withdrawReward(uint256)": FunctionFragment;
    "withdrawRewardBySign(uint256,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "actived"
      | "addRewardAmount"
      | "addStake"
      | "addStakeAmount"
      | "addValidNum"
      | "allowPrices"
      | "bind"
      | "checkDownQualified"
      | "checkReferrerPercent"
      | "checkRestakePercent"
      | "checkUpQualified"
      | "currentIndex"
      | "currentRound"
      | "ethBalance"
      | "indexUsers"
      | "nonces"
      | "oneToken"
      | "price"
      | "referrers"
      | "setActive"
      | "setOneToken"
      | "setOwner"
      | "setReferrerInfo"
      | "setUpDownLimit"
      | "stake"
      | "updateOperator"
      | "userIndexs"
      | "userRewards"
      | "userStakings"
      | "validFollowers"
      | "withdrawReward"
      | "withdrawRewardBySign"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "actived", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addRewardAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addStake",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addStakeAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addValidNum",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowPrices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bind", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkDownQualified",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkReferrerPercent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRestakePercent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpQualified",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ethBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "indexUsers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "oneToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(functionFragment: "referrers", values: [string]): string;
  encodeFunctionData(functionFragment: "setActive", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setOneToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferrerInfo",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpDownLimit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateOperator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "userIndexs",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewards",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakings",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validFollowers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewardBySign",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "actived", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addValidNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bind", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkDownQualified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkReferrerPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRestakePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpQualified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ethBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "indexUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oneToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "referrers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReferrerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpDownLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userIndexs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStakings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validFollowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewardBySign",
    data: BytesLike
  ): Result;

  events: {
    "Bind(address,address)": EventFragment;
    "GameIndex(address,uint256,uint256,uint256)": EventFragment;
    "IndexRewardDown(address,uint256,uint256)": EventFragment;
    "IndexRewardUp(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,bool)": EventFragment;
    "ReferrerReward(address,address,uint256,uint256)": EventFragment;
    "Stake(address,uint256,uint256,uint256,uint256)": EventFragment;
    "UpdateActived(address,uint256,bool)": EventFragment;
    "UpdateOperator(address,bool)": EventFragment;
    "WithdrawReward(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bind"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameIndex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IndexRewardDown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IndexRewardUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferrerReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateActived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawReward"): EventFragment;
}

export interface BindEventObject {
  sender: string;
  referrer: string;
}
export type BindEvent = TypedEvent<[string, string], BindEventObject>;

export type BindEventFilter = TypedEventFilter<BindEvent>;

export interface GameIndexEventObject {
  sender: string;
  round: BigNumber;
  index: BigNumber;
  amount: BigNumber;
}
export type GameIndexEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  GameIndexEventObject
>;

export type GameIndexEventFilter = TypedEventFilter<GameIndexEvent>;

export interface IndexRewardDownEventObject {
  sender: string;
  round: BigNumber;
  amount: BigNumber;
}
export type IndexRewardDownEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  IndexRewardDownEventObject
>;

export type IndexRewardDownEventFilter = TypedEventFilter<IndexRewardDownEvent>;

export interface IndexRewardUpEventObject {
  sender: string;
  round: BigNumber;
  amount: BigNumber;
}
export type IndexRewardUpEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  IndexRewardUpEventObject
>;

export type IndexRewardUpEventFilter = TypedEventFilter<IndexRewardUpEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  enable: boolean;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, boolean],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReferrerRewardEventObject {
  receiver: string;
  from: string;
  round: BigNumber;
  reward: BigNumber;
}
export type ReferrerRewardEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ReferrerRewardEventObject
>;

export type ReferrerRewardEventFilter = TypedEventFilter<ReferrerRewardEvent>;

export interface StakeEventObject {
  sender: string;
  round: BigNumber;
  amount: BigNumber;
  indexReward: BigNumber;
  referrerReward: BigNumber;
}
export type StakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  StakeEventObject
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface UpdateActivedEventObject {
  sender: string;
  round: BigNumber;
  state: boolean;
}
export type UpdateActivedEvent = TypedEvent<
  [string, BigNumber, boolean],
  UpdateActivedEventObject
>;

export type UpdateActivedEventFilter = TypedEventFilter<UpdateActivedEvent>;

export interface UpdateOperatorEventObject {
  operator: string;
  enable: boolean;
}
export type UpdateOperatorEvent = TypedEvent<
  [string, boolean],
  UpdateOperatorEventObject
>;

export type UpdateOperatorEventFilter = TypedEventFilter<UpdateOperatorEvent>;

export interface WithdrawRewardEventObject {
  sender: string;
  round: BigNumber;
  contractReward: BigNumber;
  signReward: BigNumber;
  stakeAmount: BigNumber;
  indexReward: BigNumber;
  referrerReward: BigNumber;
}
export type WithdrawRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  WithdrawRewardEventObject
>;

export type WithdrawRewardEventFilter = TypedEventFilter<WithdrawRewardEvent>;

export interface EggAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EggAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    actived(overrides?: CallOverrides): Promise<[boolean]>;

    addRewardAmount(
      _addr: string,
      num: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addStake(
      addrs: string[],
      amountArr: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addStakeAmount(
      _addr: string,
      num: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addValidNum(
      _addr: string,
      num: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bind(
      _referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    checkDownQualified(
      stakingAmount: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkReferrerPercent(
      num: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkRestakePercent(
      amount: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkUpQualified(
      stakingAmount: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    currentIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    ethBalance(addr: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    indexUsers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    oneToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    referrers(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    setActive(
      _actived: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOneToken(
      _oneToken: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      _enable: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setReferrerInfo(
      inviterArr: string[],
      inviteeArr: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUpDownLimit(
      up: BigNumberish,
      down: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateOperator(
      _op: string,
      _enable: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userIndexs(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userRewards(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userStakings(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validFollowers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawReward(
      round: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawRewardBySign(
      round: BigNumberish,
      amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  actived(overrides?: CallOverrides): Promise<boolean>;

  addRewardAmount(
    _addr: string,
    num: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addStake(
    addrs: string[],
    amountArr: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addStakeAmount(
    _addr: string,
    num: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addValidNum(
    _addr: string,
    num: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowPrices(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  bind(
    _referrer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  checkDownQualified(
    stakingAmount: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkReferrerPercent(
    num: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkRestakePercent(
    amount: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkUpQualified(
    stakingAmount: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

  currentRound(overrides?: CallOverrides): Promise<BigNumber>;

  ethBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  indexUsers(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  oneToken(overrides?: CallOverrides): Promise<BigNumber>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  referrers(arg0: string, overrides?: CallOverrides): Promise<string>;

  setActive(
    _actived: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOneToken(
    _oneToken: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    _enable: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setReferrerInfo(
    inviterArr: string[],
    inviteeArr: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUpDownLimit(
    up: BigNumberish,
    down: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateOperator(
    _op: string,
    _enable: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userIndexs(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userRewards(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userStakings(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validFollowers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdrawReward(
    round: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawRewardBySign(
    round: BigNumberish,
    amount: BigNumberish,
    _deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    actived(overrides?: CallOverrides): Promise<boolean>;

    addRewardAmount(
      _addr: string,
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addStake(
      addrs: string[],
      amountArr: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    addStakeAmount(
      _addr: string,
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addValidNum(
      _addr: string,
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bind(_referrer: string, overrides?: CallOverrides): Promise<void>;

    checkDownQualified(
      stakingAmount: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkReferrerPercent(
      num: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkRestakePercent(
      amount: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkUpQualified(
      stakingAmount: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    ethBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    indexUsers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    oneToken(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    referrers(arg0: string, overrides?: CallOverrides): Promise<string>;

    setActive(_actived: boolean, overrides?: CallOverrides): Promise<void>;

    setOneToken(
      _oneToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      newOwner: string,
      _enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferrerInfo(
      inviterArr: string[],
      inviteeArr: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setUpDownLimit(
      up: BigNumberish,
      down: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(overrides?: CallOverrides): Promise<void>;

    updateOperator(
      _op: string,
      _enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    userIndexs(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRewards(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStakings(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validFollowers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawReward(
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRewardBySign(
      round: BigNumberish,
      amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Bind(address,address)"(
      sender?: string | null,
      referrer?: string | null
    ): BindEventFilter;
    Bind(sender?: string | null, referrer?: string | null): BindEventFilter;

    "GameIndex(address,uint256,uint256,uint256)"(
      sender?: string | null,
      round?: BigNumberish | null,
      index?: BigNumberish | null,
      amount?: null
    ): GameIndexEventFilter;
    GameIndex(
      sender?: string | null,
      round?: BigNumberish | null,
      index?: BigNumberish | null,
      amount?: null
    ): GameIndexEventFilter;

    "IndexRewardDown(address,uint256,uint256)"(
      sender?: string | null,
      round?: BigNumberish | null,
      amount?: BigNumberish | null
    ): IndexRewardDownEventFilter;
    IndexRewardDown(
      sender?: string | null,
      round?: BigNumberish | null,
      amount?: BigNumberish | null
    ): IndexRewardDownEventFilter;

    "IndexRewardUp(address,uint256,uint256)"(
      sender?: string | null,
      round?: BigNumberish | null,
      amount?: BigNumberish | null
    ): IndexRewardUpEventFilter;
    IndexRewardUp(
      sender?: string | null,
      round?: BigNumberish | null,
      amount?: BigNumberish | null
    ): IndexRewardUpEventFilter;

    "OwnershipTransferred(address,bool)"(
      previousOwner?: string | null,
      enable?: boolean | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      enable?: boolean | null
    ): OwnershipTransferredEventFilter;

    "ReferrerReward(address,address,uint256,uint256)"(
      receiver?: string | null,
      from?: string | null,
      round?: BigNumberish | null,
      reward?: null
    ): ReferrerRewardEventFilter;
    ReferrerReward(
      receiver?: string | null,
      from?: string | null,
      round?: BigNumberish | null,
      reward?: null
    ): ReferrerRewardEventFilter;

    "Stake(address,uint256,uint256,uint256,uint256)"(
      sender?: string | null,
      round?: BigNumberish | null,
      amount?: BigNumberish | null,
      indexReward?: null,
      referrerReward?: null
    ): StakeEventFilter;
    Stake(
      sender?: string | null,
      round?: BigNumberish | null,
      amount?: BigNumberish | null,
      indexReward?: null,
      referrerReward?: null
    ): StakeEventFilter;

    "UpdateActived(address,uint256,bool)"(
      sender?: string | null,
      round?: BigNumberish | null,
      state?: boolean | null
    ): UpdateActivedEventFilter;
    UpdateActived(
      sender?: string | null,
      round?: BigNumberish | null,
      state?: boolean | null
    ): UpdateActivedEventFilter;

    "UpdateOperator(address,bool)"(
      operator?: string | null,
      enable?: null
    ): UpdateOperatorEventFilter;
    UpdateOperator(
      operator?: string | null,
      enable?: null
    ): UpdateOperatorEventFilter;

    "WithdrawReward(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      sender?: string | null,
      round?: BigNumberish | null,
      contractReward?: BigNumberish | null,
      signReward?: null,
      stakeAmount?: null,
      indexReward?: null,
      referrerReward?: null
    ): WithdrawRewardEventFilter;
    WithdrawReward(
      sender?: string | null,
      round?: BigNumberish | null,
      contractReward?: BigNumberish | null,
      signReward?: null,
      stakeAmount?: null,
      indexReward?: null,
      referrerReward?: null
    ): WithdrawRewardEventFilter;
  };

  estimateGas: {
    actived(overrides?: CallOverrides): Promise<BigNumber>;

    addRewardAmount(
      _addr: string,
      num: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addStake(
      addrs: string[],
      amountArr: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addStakeAmount(
      _addr: string,
      num: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addValidNum(
      _addr: string,
      num: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bind(
      _referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    checkDownQualified(
      stakingAmount: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkReferrerPercent(
      num: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkRestakePercent(
      amount: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkUpQualified(
      stakingAmount: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    ethBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    indexUsers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    oneToken(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    referrers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setActive(
      _actived: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOneToken(
      _oneToken: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      _enable: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setReferrerInfo(
      inviterArr: string[],
      inviteeArr: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUpDownLimit(
      up: BigNumberish,
      down: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake(overrides?: PayableOverrides & { from?: string }): Promise<BigNumber>;

    updateOperator(
      _op: string,
      _enable: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userIndexs(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRewards(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStakings(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validFollowers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawReward(
      round: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawRewardBySign(
      round: BigNumberish,
      amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    actived(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRewardAmount(
      _addr: string,
      num: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addStake(
      addrs: string[],
      amountArr: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addStakeAmount(
      _addr: string,
      num: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addValidNum(
      _addr: string,
      num: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bind(
      _referrer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    checkDownQualified(
      stakingAmount: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkReferrerPercent(
      num: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkRestakePercent(
      amount: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkUpQualified(
      stakingAmount: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethBalance(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexUsers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oneToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referrers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setActive(
      _actived: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOneToken(
      _oneToken: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      _enable: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setReferrerInfo(
      inviterArr: string[],
      inviteeArr: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUpDownLimit(
      up: BigNumberish,
      down: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateOperator(
      _op: string,
      _enable: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userIndexs(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRewards(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStakings(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validFollowers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawReward(
      round: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawRewardBySign(
      round: BigNumberish,
      amount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
